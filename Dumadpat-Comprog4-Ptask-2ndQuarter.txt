//Zachary Dumadapat
using System;
using System.Threading;


// ENUM: Represents the difficulty levels of the game
public enum DifficultyLevel
{
    Basic = 1,
    Medium = 2,
    Hard = 3
}

// ABSTRACT CLASS: Represents a game opponent
public abstract class Opponent
{
    // Properties
    public string OpName { get; set; }
    public int OpHealth { get; set; }

    // Constructor
    public Opponent(string name, int health)
    {
        OpName = name;
        OpHealth = health;
    }
    // Array of random dialogue when the opponent is hit
    private static string[] hitDialogues = {
        "Agh! You got me!",
        "Ouch! That hurt!",
        "You're good at this!",
        "I felt that one!",
        "Nice shot!"
    };
    // Array of random dialogue when the opponent is not hit
    private static string[] nothitDialogues = {
          "Haha! You missed!",
          "Haha! Wrong answer!",
          "Oops! Noob move!",
          "Nice try, but no hit!",
          "You're not getting me that easily!"
    };

    // ABSTRACT METHOD: Calculates damage based on the difficulty level
    public abstract int CalculateDamage();

    // METHOD: Displays the opponent information and uses the dialogues when player damages oponnent
    public void DisplayOpponentInfoHit()
    {
        Random random = new Random();
        string randomDialogueHit = hitDialogues[random.Next(hitDialogues.Length)];

      

        Console.WriteLine();
        Console.ForegroundColor = ConsoleColor.DarkYellow;
        Console.Write($"{ OpName}: { randomDialogueHit}");
        Console.ResetColor();
        Console.WriteLine();
    }

    public void DisplayOpponentInfoNotHit()
    {
        Random random = new Random();
        string randomDialogueNotHit = nothitDialogues[random.Next(nothitDialogues.Length)];

      
        Console.WriteLine();


        Console.WriteLine();
        Console.ForegroundColor = ConsoleColor.DarkYellow;
        Console.Write($"{OpName}: {randomDialogueNotHit}");
        Console.ResetColor();
        Console.WriteLine();

    }
}



// INHERITANCE: Derived class representing a specific opponent type
public class SimpleOpponent : Opponent
{
    // Constructor
    public SimpleOpponent(string name) : base(name, 100) { } // Opponent health is at 100hp

    // OVERRIDE METHOD: Calculates damage done to opponent (fixed at 20)
    public override int CalculateDamage()
    {
        return Math.Min(20, OpHealth);
    }
}

public class IntermediateOpponent : Opponent
{
    // Constructor
    public IntermediateOpponent(string name) : base(name, 198) { } // Opponent health is at 198hp

    // OVERRIDE METHOD: Calculates damage done to opponent (fixed at 22)
    public override int CalculateDamage()
    {
        return Math.Min(22, OpHealth);
    }
}

public class HardOpponent : Opponent
{
    // Constructor
    public HardOpponent(string name) : base(name, 300) { }  // Opponent health is at 300hp

    // OVERRIDE METHOD: Calculates damage done to opponent (fixed at 25)
    public override int CalculateDamage()
    {
        return Math.Min(25, OpHealth);
    }
}

class Program // main logic or function of the game
{
    static Random random = new Random();

    static void Main()
    {
        Console.ForegroundColor = ConsoleColor.DarkYellow;
        string titleArt = @"                    ___  ___  ___ _____ _   _       ___  ___  _____   ___   _  ________  ___
                    |  \/  | / _ \_   _| | | |      |  \/  | / _ \ \ / / | | ||  ___|  \/  |
                    | .  . |/ /_\ \| | | |_| |      | .  . |/ /_\ \ V /| |_| || |__ | .  . |
                    | |\/| ||  _  || | |  _  |      | |\/| ||  _  |\ / |  _  ||  __|| |\/| |
                    | |  | || | | || | | | | |      | |  | || | | || | | | | || |___| |  | |
                    \_|  |_/\_| |_/\_/ \_| |_/      \_|  |_/\_| |_/\_/ \_| |_/\____/\_|  |_/                            ";

        foreach (char c in titleArt)
        {
            Console.Write(c);
            Thread.Sleep(1); // Adjust sleep duration for typing speed
        }


        Console.WriteLine("\n");
        Console.WriteLine("                                         Press any key to start");
        Console.ResetColor();
        Console.ReadKey();
        Console.Clear();
       

        Console.ForegroundColor = ConsoleColor.White;
        Console.WriteLine("Welcome to the Math Game!");
        Console.Write("Enter your username: ");
        Console.ResetColor();
        Console.ForegroundColor = ConsoleColor.Green;
        string username = Console.ReadLine();
        Console.ResetColor();

        Console.Clear();
        Console.ResetColor();
        Console.ForegroundColor = ConsoleColor.DarkYellow;
        Console.WriteLine("\n");
        string inTro = @$"                         
     Welcome {username} to Math mayhem, fight three bosses which are simple, Intermediate, and Hard Opponents.
  rules are simple, if you incorrectly answer a math question you die, and answer all of them right you win.
                             And also take your time, Rushing means more mistakes.";
        Console.WriteLine(" ");
       
        foreach (char c in inTro)
        {
            Console.Write(c);
            Thread.Sleep(1); // Adjust sleep duration for typing speed
        }
        Console.ResetColor();

        Console.ResetColor();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine(" \n");
        Console.WriteLine("                                               Press any key to continue...");
        Console.ResetColor();
        Console.ReadKey();
        Console.Clear();

        // LOOP: Main game loop
        while (true)
        {
            int playerHealth = 100;

            Console.Clear();
            Console.ResetColor();
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("    -------- MATH MAYHEM ---------");
            Console.WriteLine("    Developed by Zachary Dumadapat");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("    ----Select Difficulty Level---");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("             1 = Basic");
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine("             2 = Medium");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("             3 = Hard");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("             4 = Quit");
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write($"  Enter your choice {username}: ");
            Console.ForegroundColor = ConsoleColor.Green;
            string input = Console.ReadLine();
            Console.ResetColor();
            Console.Clear();

            if (int.TryParse(input, out int choice))
            {
                Opponent opponent = null;

                // SWITCH CASE: Handle user's choice and select the appropriate opponent
                switch (choice)
                {
                    case 1:
                        opponent = new SimpleOpponent("Simple Opponent");
                        break;
                    case 2:
                        opponent = new IntermediateOpponent("Intermediate Opponent");
                        break;
                    case 3:
                        opponent = new HardOpponent("Hard Opponent");
                        break;
                    case 4:
                        Console.WriteLine("\nThanks for playing. Goodbye!");
                        return;
                    default:

                        Console.BackgroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nInvalid choice. Please try again.");
                        Console.ResetColor();
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine("\nPress any key to continue...");
                        Console.ResetColor();
                        Console.ReadKey();
                        break;
                }

                //Zachary Dumadapat

                if (opponent != null)
                {
                    // METHOD CALL: PlayGame method
                    PlayGame(username, ref playerHealth, opponent);

                    // Checks if the player's in case the health is 0 after the round  (unlikely  at least 5% chance to happen) but will work in case it does.         
                    if (playerHealth <= 0)
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        string titleDeath = @"                    __   __ _____  _   _   ______  _____  _____ ______ 
                    \ \ / /|  _  || | | |  |  _  \|_   _||  ___||  _  \
                     \ V / | | | || | | |  | | | |  | |  | |__  | | | |
                      \ /  | | | || | | |  | | | |  | |  |  __| | | | |
                      | |  \ \_/ /| |_| |  | |/ /  _| |_ | |___ | |/ / 
                      \_/   \___/  \___/   |___/   \___/ \____/ |___/                                                     
                                                                  ";

                        foreach (char c in titleDeath)
                        {
                            Console.Write(c);
                            Thread.Sleep(1); // Adjust sleep duration for typing speed
                        }
                        Console.ResetColor();

                        Console.WriteLine("\n");

                        Console.WriteLine($"\nYou died {username}!");
                        string playAgainInput;

                        do
                        {
                            Console.Write($"Would you like to play again{username}? (yes/no): ");
                            playAgainInput = Console.ReadLine().ToLower();

                            if (playAgainInput == "yes")
                            {
                                // Reset player's health
                                playerHealth = 100;
                               
                                Console.WriteLine($"Health reset. Let's play again {username}!");
                                return;
                            }
                            else if (playAgainInput == "no")
                            {
                                Console.ForegroundColor = ConsoleColor.DarkYellow;
                                string goodBye = @" _    _  _____  _      _      ______  _       ___  __   __ _____ ______       _____  _____  _____ ______ ______ __   __ _____ 
| |  | ||  ___|| |    | |     | ___ \| |     / _ \ \ \ / /|  ___||  _  \     |  __ \|  _  ||  _  ||  _  \| ___ \\ \ / /|  ___|
| |  | || |__  | |    | |     | |_/ /| |    / /_\ \ \ V / | |__  | | | |     | |  \/| | | || | | || | | || |_/ / \ V / | |__  
| |/\| ||  __| | |    | |     |  __/ | |    |  _  |  \ /  |  __| | | | |     | | __ | | | || | | || | | || ___ \  \ /  |  __| 
\  /\  /| |___ | |____| |____ | |    | |____| | | |  | |  | |___ | |/ /   _  | |_\ \\ \_/ /\ \_/ /| |/ / | |_/ /  | |  | |___ 
 \/  \/ \____/ \_____/\_____/ \_|    \_____/\_| |_/  \_/  \____/ |___/   ( )  \____/ \___/  \___/ |___/  \____/   \_/  \____/ ";

                                foreach (char c in goodBye)
                                {
                                    Console.Write(c);
                                    Thread.Sleep(1); // Adjust sleep duration for typing speed
                                }
                                Console.ResetColor();

                                Console.WriteLine("\n");
                                Console.WriteLine($"Thanks for playing, {username}! Goodbye!");
                                Environment.Exit(0);
                            }
                            else
                            {
                                Console.ResetColor();
                                Console.BackgroundColor = ConsoleColor.Red;
                                Console.ForegroundColor = ConsoleColor.White;
                                Console.Write("Invalid input. Please enter 'yes' or 'no'.");
                                Console.ResetColor();
                                Console.WriteLine();
                            }
                        } while (playAgainInput != "yes" && playAgainInput != "no");
                    }
                }
            }
            else
            {
                Console.BackgroundColor = ConsoleColor.Red;
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write($"\nInvalid input {username}. Please enter a number( 1 , 2 , 3 , or 4.");
                Console.ResetColor();
                Console.WriteLine();
                Console.WriteLine("\nPress any key to continue...");
                Console.ReadKey();

            }
        }
    }

    // METHOD: PlayGame method
    static void PlayGame(string username, ref int playerHealth, Opponent opponent)
    {
        Console.ForegroundColor = ConsoleColor.DarkYellow;
        foreach (char c in $"\n{username}, get ready for the {opponent.OpName}!")
        {
            Console.Write(c);
            Thread.Sleep(5);
        }
        Console.WriteLine();
        Console.WriteLine(new string('=', 40));
        Console.ResetColor();

        Console.WriteLine("\nPress any key to continue...");
        Console.ReadKey();


        int numQuestions = (opponent is SimpleOpponent) ? 5 : (opponent is IntermediateOpponent) ? 9 : 12;

        // Check in case if the player's health is already zero or less
        if (playerHealth <= 0)
        {
            Console.WriteLine($"\nWhat {username} you died before starting the level! thats impossible! or did you try cheat?");
            return; // Exit the method if the player is already dead
        }

        // Determine the operation based on difficulty level
        Func<int, int, int> operation;
        string operationSymbol;
        int numberRangeMax;

        if (opponent is SimpleOpponent)
        {
            operation = (a, b) => a + b;
            operationSymbol = "+";
            numberRangeMax = 10;
        }
        else if (opponent is IntermediateOpponent)
        {
            operation = (a, b) => a - b;
            operationSymbol = "-";
            numberRangeMax = 100;
        }
        else // HardOpponent
        {
            operation = (a, b) => a * b;
            operationSymbol = "*";
            numberRangeMax = 500;
        }

        // LOOP: Game loop for questions                                                                               //if you complete level or lost a level or invalid input 
        for (int i = 1; i <= numQuestions; i++)
        {
            Console.Clear();
            // Check if the opponent's health is already zero or less
            if (opponent.OpHealth <= 0)
            {
                Console.WriteLine("\nLevel completed!");
                Console.WriteLine($"Congratulations, {username}! You defeated {opponent.OpName}!");
                Console.WriteLine(new string('=', 40));
                return; // Exit the method if the opponent is defeated
            }


            Console.Write("      ");
            Console.BackgroundColor = ConsoleColor.Green;
            Console.ForegroundColor = ConsoleColor.Black;
            Console.Write($"{username}: {Math.Max(0, playerHealth)} || {opponent.OpName}: {Math.Max(0, opponent.OpHealth)}");
            Console.ResetColor();
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"\nQuestion {i}:");
            Console.ResetColor();


            int num1 = random.Next(1, numberRangeMax); // Adjusted based on the difficulty level
            int num2 = random.Next(1, numberRangeMax); // Adjusted based on the difficulty level
            Console.ResetColor();
            Console.Write($"{num1} {operationSymbol} {num2} = ");

            // LOOP: Keep asking the same question until the user provides a valid input
            while (true)
            {
                Console.ResetColor();
                Console.ForegroundColor = ConsoleColor.Green;
                if (int.TryParse(Console.ReadLine(), out int userAnswer))
                {
                    Console.ResetColor();
                    if (userAnswer == operation(num1, num2))
                    {
                        int damage = opponent.CalculateDamage();
                        opponent.OpHealth -= damage;

                     

                        // COLOR: Green for correct answer
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($"Correct Answer {username}! You dealt {damage} damage to {opponent.OpName}.");
                        Console.ResetColor();

                      

                        opponent.DisplayOpponentInfoHit();
                        break;
                    }
                    else
                    {
                        Console.ResetColor();
                        playerHealth -= 10;

                        // COLOR: Red for incorrect answer
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"Incorrect answer {username}! You lost 10 health points.");
                        Console.ResetColor();

                      

                        opponent.DisplayOpponentInfoNotHit();

                        // Checks if the player's health again if it is 0 after the incorrect answer
                        if (playerHealth <= 0)
                        {
                            Console.Clear();

                            Console.ForegroundColor = ConsoleColor.Red;
                            string titleDeath = @"                    __   __ _____  _   _   ______  _____  _____ ______ 
                    \ \ / /|  _  || | | |  |  _  \|_   _||  ___||  _  \
                     \ V / | | | || | | |  | | | |  | |  | |__  | | | |
                      \ /  | | | || | | |  | | | |  | |  |  __| | | | |
                      | |  \ \_/ /| |_| |  | |/ /  _| |_ | |___ | |/ / 
                      \_/   \___/  \___/   |___/   \___/ \____/ |___/                                                     
                                                                  ";

                            foreach (char c in titleDeath)
                            {
                                Console.Write(c);
                                Thread.Sleep(1); // Adjust sleep duration for typing speed
                            }
                            Console.ResetColor();

                            Console.WriteLine("\n");

                            Console.WriteLine($"\nYou died{username}!");
                            string playAgainInput;

                            do
                            {
                                Console.Write($"Would you like to play again {username}? (yes/no): ");
                                Console.ForegroundColor = ConsoleColor.Green;
                                Console.WriteLine();
                                playAgainInput = Console.ReadLine().ToLower();
                                Console.ResetColor();

                                if (playAgainInput == "yes")
                                {  

                                    // Reset player's health 
                                    playerHealth = 100;
                                   
                                    Console.Clear();
                                    Console.WriteLine($"Health reset. Let's play again {username}!");
                                    Console.WriteLine("\nPress any key to continue...");
                                    Console.ReadKey();
                                    return;
                                }
                                else if (playAgainInput == "no")
                                {
                                    Console.ForegroundColor = ConsoleColor.DarkYellow;
                                    string goodBye = @" _    _  _____  _      _      ______  _       ___  __   __ _____ ______       _____  _____  _____ ______ ______ __   __ _____ 
| |  | ||  ___|| |    | |     | ___ \| |     / _ \ \ \ / /|  ___||  _  \     |  __ \|  _  ||  _  ||  _  \| ___ \\ \ / /|  ___|
| |  | || |__  | |    | |     | |_/ /| |    / /_\ \ \ V / | |__  | | | |     | |  \/| | | || | | || | | || |_/ / \ V / | |__  
| |/\| ||  __| | |    | |     |  __/ | |    |  _  |  \ /  |  __| | | | |     | | __ | | | || | | || | | || ___ \  \ /  |  __| 
\  /\  /| |___ | |____| |____ | |    | |____| | | |  | |  | |___ | |/ /   _  | |_\ \\ \_/ /\ \_/ /| |/ / | |_/ /  | |  | |___ 
 \/  \/ \____/ \_____/\_____/ \_|    \_____/\_| |_/  \_/  \____/ |___/   ( )  \____/ \___/  \___/ |___/  \____/   \_/  \____/  ";

                                    foreach (char c in goodBye)
                                    {
                                        Console.Write(c);
                                        Thread.Sleep(1); // Adjust sleep duration for typing speed
                                    }
                                    Console.ResetColor();

                                    Console.WriteLine("\n");
                                    Console.WriteLine($"Thanks for playing, {username}! Goodbye!");
                                    Environment.Exit(0);
                                }
                                else
                                {
                                    Console.ResetColor();
                                    Console.BackgroundColor = ConsoleColor.Red;
                                    Console.ForegroundColor = ConsoleColor.White;
                                    Console.Write("Invalid input. Please enter 'yes' or 'no'.");
                                    Console.ResetColor();
                                    Console.WriteLine();
                                }
                            } while (playAgainInput != "yes" && playAgainInput != "no");

                            break;
                        }
                        break;
                    }
                }
                else
                {
                    Console.ResetColor();
                    Console.BackgroundColor = ConsoleColor.Red;
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write($"Invalid input. Please enter a number {username}.");
                    Console.ResetColor();
                    Console.WriteLine();

                }
            }
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }

        // Check the opponent's health after the loop to handle cases where the last question defeats the opponent
        if (opponent.OpHealth <= 0)
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Green;
            string titleVic = @"                     _   _  _____  _____  _____  _____ ______ __   __
                    | | | ||_   _|/  __ \|_   _||  _  || ___ \\ \ / /
                    | | | |  | |  | /  \/  | |  | | | || |_/ / \ V / 
                    | | | |  | |  | |      | |  | | | ||    /   \ /  
                    \ \_/ / _| |_ | \__/\  | |  \ \_/ /| |\ \   | |  
                     \___/  \___/  \____/  \_/   \___/ \_| \_|  \_/  
                                                 ";

            foreach (char c in titleVic)
            {
                Console.Write(c);
                Thread.Sleep(1); // Adjust sleep duration for typing speed
            }
            Console.ResetColor();
            Console.WriteLine("\n");

            Console.WriteLine("\nLevel completed!");
            Console.WriteLine($"Congratulations, {username}! You defeated {opponent.OpName}!");
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }
        else
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Red;
            string titleDef = @"                    ______  _____ ______  _____   ___   _____ 
                    |  _  \|  ___||  ___||  ___| / _ \ |_   _|
                    | | | || |__  | |_   | |__  / /_\ \  | |  
                    | | | ||  __| |  _|  |  __| |  _  |  | |  
                    | |/ / | |___ | |    | |___ | | | |  | |  
                    |___/  \____/ \_|    \____/ \_| |_/  \_/  
                                                                  ";

            foreach (char c in titleDef)
            {
                Console.Write(c);
                Thread.Sleep(1); // Adjust sleep duration for typing speed
            }
            Console.ResetColor();

            Console.WriteLine("\n");
            Console.WriteLine($"Oops, {username}! {opponent.OpName} survived with {Math.Max(0, opponent.OpHealth)} health points.");
            Console.WriteLine("\nPress any key to continue...");
            Console.ReadKey();
        }

        Console.WriteLine(new string('=', 40));
    }
}
//Zachary Dumadapat
